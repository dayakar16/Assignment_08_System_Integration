const express = require("express");
const bodyParser = require("body-parser");
const cors = require("cors");
const app = express();
const port = 3000;
const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');
const { v4: uuidv4 } = require('uuid');


const options = {
  swaggerDefinition: {
    openapi: "3.0.0",
    info: {
      title: "Foods API",
      description: "Foods API autogenerated by swagger docs",
      contact: {
        name: "Dayakar Ravuri"
      },
      version: "1.0.0"
    },
    host: "167.99.229.113:3000",
    basePath: "/"
  },
  apis: ["server.js"]
};

const specs = swaggerJsdoc(options);
app.use('/docs', swaggerUi.serve, swaggerUi.setup(specs));
app.use(cors());

const mariadb = require('mariadb');
const pool = mariadb.createPool({
        host: 'localhost',
        user: 'root',
        password: 'root',
        database: 'sample',
        port: 3306,
        connectionLimit: 5
});

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));


/**
 * @swagger
 * components:
 *      parameters:
 *         schemas:
 *             fooditem:
 *                 type: object
 *                 required:
 *                     -ITEM_NAME
 *                     -ITEM_UNIT
 *                     -COMPANY_ID
 *                 properties:
 *                     ITEM_NAME:
 *                         type: string
 *                         description: name of the food item
 *                     ITEM_UNIT:
 *                         type: string
 *                         description: unit of the food 
 *                     COMPANY_ID:
 *                         type: string
 *                         description: id of the company
 *                 example:
 *                     ITEM_NAME: Biriyani
 *                     ITEM_UNIT: Pcs
 *                     COMPANY_ID: 88
 *             nameAndUnit:
 *                 type: object 
 *                 required: 
 *                     -ITEM_NAME
 *                     -ITEM_UNIT
 *                 properties:
 *                     ITEM_NAME: 
 *                         type: string
 *                         description: updated class of the student 
 *                     ITEM_UNIT: 
 *                         type: string 
 *                         description: updated section of the student
 *                 example: 
 *                     ITEM_NAME: Fresh Juice
 *                     ITEM_UNIT: Pcs
  *             Company:
 *                 type: object 
 *                 required: 
 *                     -COMPANY_ID
 *                 properties:
 *                     COMPANY_ID: 
 *                         type: string
 *                         description: updated class of the student 
 *                 example: 
 *                     COMPANY_ID: 2  
 */



app.get('/', (req, res) => {
        res.send("Hello World");
});


var len = 0

app.get('/orders', async (req, res) => {
        const result = await pool.query("select * from orders");
        len = result.length
        res.send(result);
});


app.get('/students', async (req, res) => {
        const result = await pool.query("select * from student");
        res.send(result);
});



app.get('/items', async (req, res) => {
        const result = await pool.query("select * from listofitem");
        res.send(result);
});


/**
 * @swagger
 * /foods:
 *  get:
 *    description: Return foods
 *    responses:
 *      '200':
 *        description: A successful response
 */
app.get('/foods', async (req, res) => {
        const result = await pool.query("select * from foods");
        res.send(result);
});


/**
 * @swagger
 * /newfood:
 *      post:
 *          requestBody:
 *              required: true
 *              content:
 *                  application/json:
 *                      schema:
 *                          $ref: '#/components/parameters/schemas/fooditem'
 *          description: adding a new food item.
 *          produces:
 *              -application/json
 *          responses:
 *              200:
 *                  description: All foods available.
 *              400:
 *                  description: bad input criteria
 */
app.post('/newfood', async (req, res) => {
    let food = req.body;
    food.ITEM_ID = uuidv4();
    try {
        if (typeof food.ITEM_UNIT != "undefined"  && typeof food.ITEM_NAME != "undefined" && typeof food.COMPANY_ID != "undefined" && food.ITEM_ID != "undefined")
            { 
                const result = await pool.query("insert into foods (ITEM_NAME,ITEM_UNIT,COMPANY_ID,ITEM_ID) values (?,?,?,?)", [food.ITEM_NAME,food.ITEM_UNIT,food.COMPANY_ID,food.ITEM_ID]);
                const result1 = await pool.query("select * from foods");
                res.status(200).send(result1)
            }
            else
            {
                res.status(400).send({ responseMessage: "Incorrect Input" });
            }    
    } catch (err) {
        throw err;
    }
});

/**
 * @swagger
 * /update/{id}:
 *      put:
 *          description: update food using id
 *          produces:
 *              -application/json
 *          responses:
 *              200:
 *                  description: successfully updated the food item
 *              400:
 *                  description: provided id is not available
 *              500:
 *                  description: internal server error occured while performing the task
 *          parameters:
 *              - in: path
 *                name: id
 *                description: food id that needs to be updated
 *                type: string
 *                required: true
 *          requestBody:
 *              required: true
 *              content:
 *                  application/json:
 *                      schema:
 *                          $ref: '#/components/parameters/schemas/nameAndUnit'
 */
app.put('/update/:id', async (req, res) => {
    let food = req.body;
    try {
        if (typeof req.params.id != "undefined"  && typeof food.ITEM_UNIT != "undefined" && typeof food.ITEM_NAME != "undefined")
            { 
                const result = await pool.query("update foods set ITEM_NAME = ?, ITEM_UNIT = ? where ITEM_ID = ?", [food.ITEM_NAME, food.ITEM_UNIT, req.params.id]);
                
                if (result.affectedRows != 0)
                {
                    const result1 = await pool.query("select * from foods");
                  res.status(200).send(result1)
                }
                else
                 {
                    res.status(400).send({ responseMessage: "Id not found" });
                  }
            }
            else
            {
                res.status(400).send({ responseMessage: "Incorrect Input" });
            }    
    } catch (err) {
        throw err;
    } 
});


/**
 * @swagger
 * /company/{id}:
 *      patch:
 *          description: updates the food using id
 *          produces:
 *              -application/json
 *          responses:
 *              200:
 *                  description: successfully updated the food item
 *              400:
 *                  description: Id not found to update
 *              500:
 *                  description: internal server error occured
 *          parameters:
 *              - in: path
 *                name: id
 *                description: food item id that needs to be updated
 *                type: string
 *                required: true
 *          requestBody:
 *              required: true
 *              content:
 *                  application/json:
 *                      schema:
 *                          $ref: '#/components/parameters/schemas/Company'
 */
app.patch("/company/:id", async (req,res)=> { 
    let food = req.body 
    console.log(req.params.id)
    try {
        if (typeof req.params.id != "undefined"  && typeof food.COMPANY_ID != "undefined")
        { 

            const result = await pool.query("update foods set COMPANY_ID = ? where ITEM_ID = ?",[food.COMPANY_ID,req.params.id])
            
            if (result.affectedRows != 0)
            {
                const result1 = await pool.query("select * from foods");
              res.status(200).send(result1)
            }
            else
             {
                res.status(400).send({ responseMessage: "Id not found" });
              }
        }
        else
        {
            res.status(400).send({ responseMessage: "Either Rollid or Student Title is undefined" });
        }
    }catch(err) { 
        throw err;
    }
})
 

/**
 * @swagger
 * /delete/{id}:
 *      delete:
 *          description: remove a food item using id
 *          produces:
 *              -application/json
 *          responses:
 *              200:
 *                  description: successfully deleted the food item
 *              400:
 *                  description: Id not found to delete
 *              500:
 *                  description: internal server error occured
 *          parameters:
 *              - in: path
 *                name: id
 *                description: Food id that needs to be deleted.
 *                type: string
 *                required: true
 */
 app.delete('/delete/:id', async (req, res) => {
    try {
        if (typeof req.params.id != "undefined")
        {
            const result = await pool.query("delete from foods where ITEM_ID = ?", [req.params.id]);
            if (result.affectedRows != 0)
            {
                const result1 = await pool.query("select * from foods");
              res.status(200).send(result1)
            }
            else
             {
                res.status(400).send({ responseMessage: "Id not found" });
              }
        }
        else
        {
            res.status(400).send({ responseMessage: "Input is not given" });
        }

    } catch (err) {
        throw err
    }
});




app.listen(port, () => {
        console.log(`Example app is listening at http://localhost:${port}`);
});


